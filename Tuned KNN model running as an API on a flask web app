from flask import render_template, Flask, request
import pandas as pd
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error
import pickle

#Load dataset
#Q value taken from NUBASE2020 (published 2021)
dataset = pd.read_csv('newdataQ.csv')

#Declare the independent variables and dependent variable
X = dataset[['A', 'Z']]
Y = dataset['Qalpha']
names=['A', 'Z', 'Qalpha']

# Split-out validation dataset
validation_size = 0.20
seed = 7
X_train, X_test, Y_train, Y_test=train_test_split(X,Y,test_size=validation_size,random_state=seed)


num_folds = 10
seed = 7
scoring = 'neg_mean_squared_error'

#convert to dictionary
param_grid = dict(n_neighbors=n_neighbors, p=p)

#Create KNN object
KNN = KNeighborsRegressor()

#Apply Kfold CV, and get the parameters that give the lowest errors
kfold = KFold(n_splits=num_folds)
grid = GridSearchCV(estimator=KNN, param_grid=param_grid, scoring='neg_mean_squared_error', cv=10, n_jobs=-1)
grid_result = grid.fit(X_train, Y_train)
print ("Best MSE: %f using %s" % (grid_result.best_score_, grid_result.best_params_))

#Fit the tuned model to the training data
KNN1 = KNeighborsRegressor(n_neighbors=2, p=2)
KNN1.fit(X_train, Y_train)

#Make predictions on the training and test data
train_predict = KNN1.predict(X_train)
print("mean square error on test data = ", mean_squared_error(Y_train, train_predict))

predictions = KNN1.predict(X_test)
print("mean square error on test data = ", mean_squared_error(Y_test, predictions))

#Pickle the model
filename='finalstuff.sav'
pickle.dump(KNN1, open(filename, 'wb'))

#Declare the flask app
app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def main():

    if request.method == "POST":

        #Load the pickled model
        knn_model = pickle.load(open('finalstuff.sav', 'rb'))

        #Get the mass number (A) and atomic number (Z) data
        A = request.form.get('A')
        Z = request.form.get('Z')
    
        #Put them in a dataframe
        X = pd.DataFrame([[A, Z]], columns = ["Mass Number", "Atomic Number"])

        #Make predictions
        prediction = knn_model.predict(X)

    else:
        prediction = ""
    #Link the flask app with the html file (also included in this repository)
    return render_template("flask.html", output = prediction)

#Run the app
if __name__ == "__main__":
    app.run(debug=True)

